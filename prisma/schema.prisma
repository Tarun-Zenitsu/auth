generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum RequisitionStatus {
  PENDING_APPROVAL
  APPROVED
  REJECTED
}

enum UrgencyLevel {
  LOW
  MEDIUM
  HIGH
}

enum UserRole {
  ADMIN
  AUDITOR
  RECRUITER
  HIRING_MANAGER
  CANDIDATE
}

enum ApplicationStatus {
  SUBMITTED
  SHORTLISTED
  REJECTED
  HOLD
  INTERVIEW_STAGE
}

model User {
  id         String    @id @default(uuid())
  name       String
  email      String    @unique
  password   String?
  role       UserRole? @default(CANDIDATE)
  isVerified Boolean   @default(false)

  // Relationships
  requisitions         Requisition[]     @relation("CreatedBy")
  approvals            Requisition[]     @relation("ApprovedBy")
  applications         Application[] // As candidate
  screenedApplications Application[]     @relation("ReviewedBy") // As recruiter screener
  reviews              TechnicalReview[] // As technical reviewer

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Requisition {
  id             String       @id @default(uuid())
  jobTitle       String
  department     String
  budgetCode     String
  justification  String
  openings       Int
  skillTags      String[]
  urgency        UrgencyLevel
  location       String
  salaryRange    String
  jobDescription String

  // Relationships
  createdBy   User   @relation("CreatedBy", fields: [createdById], references: [id])
  createdById String

  approvedBy   User?   @relation("ApprovedBy", fields: [approvedById], references: [id])
  approvedById String?

  rejectionReason String?
  status          RequisitionStatus @default(PENDING_APPROVAL)

  posted       Boolean   @default(false)
  postedAt     DateTime?
  postChannels String[] // e.g. ["INTERNAL", "LINKEDIN"]
  expiresAt    DateTime?

  applications Application[] // ðŸ‘ˆ Applications for this job

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Application {
  id            String            @id @default(uuid())
  candidate     User              @relation(fields: [candidateId], references: [id])
  candidateId   String

  job           Requisition       @relation(fields: [jobId], references: [id])
  jobId         String

  status        ApplicationStatus @default(SUBMITTED)

  resumeLink    String
  coverLetter   String?

  // New screening metadata
  reviewedBy     User?    @relation("ReviewedBy", fields: [reviewedById], references: [id])
  reviewedById   String?
  reviewedAt     DateTime?
  recruiterNotes String?

  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @default(now()) @updatedAt

  reviews       TechnicalReview[] // ðŸ‘ˆ Link to panel reviews
}

model TechnicalReview {
  id String @id @default(uuid())

  application   Application @relation(fields: [applicationId], references: [id])
  applicationId String

  reviewer   User   @relation(fields: [reviewerId], references: [id])
  reviewerId String

  rating     Int?
  comments   String?
  reviewedAt DateTime?
  status     ReviewStatus @default(PENDING)
}

enum ReviewStatus {
  PENDING
  COMPLETED
}
