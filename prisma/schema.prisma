// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  AUDITOR
  RECRUITER
  HR
  CANDIDATE
}

enum ApplicationStatus {
  APPLIED
  SCREENING
  INTERVIEW
  OFFERED
  REJECTED
  HIRED
}

enum InterviewMode {
  ONLINE
  OFFLINE
}

enum DocumentType {
  RESUME
  COVER_LETTER
  PORTFOLIO
  CERTIFICATE
}

model User {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  password  String
  role      UserRole
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  applications  Application[]
  interviews    Interview[]
  feedbacks     Feedback[]
  notifications Notification[]
}

model Job {
  id          String   @id @default(uuid())
  title       String
  description String
  department  String
  location    String
  openings    Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  applications Application[]
}

model Application {
  id          String            @id @default(uuid())
  candidateId String
  jobId       String
  status      ApplicationStatus @default(APPLIED)
  resumeUrl   String?
  coverLetter String?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  candidate  User        @relation(fields: [candidateId], references: [id])
  job        Job         @relation(fields: [jobId], references: [id])
  interviews Interview[]
  feedbacks  Feedback[]
  documents  Document[]
}

model Interview {
  id            String        @id @default(uuid())
  applicationId String
  interviewerId String
  round         Int
  scheduledAt   DateTime
  mode          InterviewMode
  notes         String?

  application Application @relation(fields: [applicationId], references: [id])
  interviewer User        @relation(fields: [interviewerId], references: [id])
  feedback    Feedback?
}

model Feedback {
  id            String   @id @default(uuid())
  interviewId   String?  @unique
  applicationId String
  reviewerId    String
  rating        Int
  comments      String
  createdAt     DateTime @default(now())

  interview   Interview?  @relation(fields: [interviewId], references: [id])
  application Application @relation(fields: [applicationId], references: [id])
  reviewer    User        @relation(fields: [reviewerId], references: [id])
}

model Document {
  id            String       @id @default(uuid())
  applicationId String
  url           String
  type          DocumentType
  uploadedAt    DateTime     @default(now())

  application Application @relation(fields: [applicationId], references: [id])
}

model Notification {
  id        String   @id @default(uuid())
  userId    String
  message   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
}
