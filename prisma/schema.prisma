generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum RequisitionStatus {
  PENDING_APPROVAL
  APPROVED
  REJECTED
}

enum UrgencyLevel {
  LOW
  MEDIUM
  HIGH
}

enum UserRole {
  ADMIN
  AUDITOR
  RECRUITER
  HIRING_MANAGER
  TECHNICAL_TEAM
  CANDIDATE
}

enum ApplicationStatus {
  SUBMITTED
  SHORTLISTED
  REJECTED
  HOLD
  INTERVIEW_STAGE
}

enum ReviewStatus {
  PENDING
  COMPLETED
}

model User {
  id         String    @id @default(uuid())
  name       String
  email      String    @unique
  password   String?
  role       UserRole? @default(CANDIDATE)
  isVerified Boolean   @default(false)

  requisitions         Requisition[]     @relation("CreatedBy")
  approvals            Requisition[]     @relation("ApprovedBy")
  applications         Application[]     @relation("ApplicationCandidate")
  screenedApplications Application[]     @relation("ReviewedBy")
  reviews              TechnicalReview[] @relation("Reviewer")
  assignedApplications Application[]     @relation("AssignedToTech")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Requisition {
  id             String       @id @default(uuid())
  jobTitle       String
  department     String
  budgetCode     String
  justification  String
  openings       Int
  skillTags      String[]
  urgency        UrgencyLevel
  location       String
  salaryRange    String
  jobDescription String

  createdById String
  createdBy   User @relation("CreatedBy", fields: [createdById], references: [id], onDelete: Cascade)

  approvedById String?
  approvedBy   User? @relation("ApprovedBy", fields: [approvedById], references: [id], onDelete: SetNull)

  rejectionReason String?
  status          RequisitionStatus @default(PENDING_APPROVAL)

  posted       Boolean   @default(false)
  postedAt     DateTime?
  postChannels String[]
  expiresAt    DateTime?

  applications Application[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Application {
  id          String            @id @default(uuid())
  candidateId String
  candidate   User @relation("ApplicationCandidate", fields: [candidateId], references: [id], onDelete: Cascade)

  jobId String
  job   Requisition @relation(fields: [jobId], references: [id], onDelete: Cascade)

  status      ApplicationStatus @default(SUBMITTED)
  resumeLink  String
  coverLetter String?

  reviewedById   String?
  reviewedBy     User? @relation("ReviewedBy", fields: [reviewedById], references: [id], onDelete: SetNull)
  reviewedAt     DateTime?
  recruiterNotes String?

  assignedToTechId String?
  assignedToTech   User? @relation("AssignedToTech", fields: [assignedToTechId], references: [id], onDelete: SetNull)

  reviews    TechnicalReview[]

  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt
}

model TechnicalReview {
  id             String     @id @default(uuid())
  applicationId  String
  application    Application @relation(fields: [applicationId], references: [id], onDelete: Cascade)

  reviewerId     String
  reviewer       User @relation("Reviewer", fields: [reviewerId], references: [id], onDelete: Cascade)

  rating         Int?
  comments       String?
  reviewedAt     DateTime?
  status         ReviewStatus @default(PENDING)
}
